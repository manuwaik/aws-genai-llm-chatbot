"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphQlQuery = void 0;
const crypto = require("@aws-crypto/sha256-js");
const credential_provider_node_1 = require("@aws-sdk/credential-provider-node");
const signature_v4_1 = require("@aws-sdk/signature-v4");
const protocol_http_1 = require("@aws-sdk/protocol-http");
const { Sha256 } = crypto;
const GRAPHQL_ENDPOINT = process.env.API_ENDPOINT;
const AWS_REGION = process.env.AWS_REGION || 'eu-west-1';
const endpoint = new URL(GRAPHQL_ENDPOINT ?? "");
const graphQlQuery = async (query) => {
    const signer = new signature_v4_1.SignatureV4({
        credentials: (0, credential_provider_node_1.defaultProvider)(),
        region: AWS_REGION,
        service: 'appsync',
        sha256: Sha256
    });
    const requestToBeSigned = new protocol_http_1.HttpRequest({
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            host: endpoint.host
        },
        hostname: endpoint.host,
        body: JSON.stringify({ query }),
        path: endpoint.pathname
    });
    const signed = await signer.sign(requestToBeSigned);
    const request = new Request(endpoint, signed);
    let body;
    try {
        const response = await fetch(request);
        body = await response.json();
    }
    catch (error) {
        throw error;
    }
    return body;
};
exports.graphQlQuery = graphQlQuery;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyYXBocWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0RBQWdEO0FBQ2hELGdGQUFvRTtBQUNwRSx3REFBb0Q7QUFDcEQsMERBQXFEO0FBRXJELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUM7QUFDMUIsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztBQUNsRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxXQUFXLENBQUM7QUFFekQsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLElBQUksRUFBRSxDQUFDLENBQUM7QUFFMUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBRWxELE1BQU0sTUFBTSxHQUFHLElBQUksMEJBQVcsQ0FBQztRQUM3QixXQUFXLEVBQUUsSUFBQSwwQ0FBZSxHQUFFO1FBQzlCLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFDO0lBR0gsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLDJCQUFXLENBQUM7UUFDeEMsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUU7WUFDUCxjQUFjLEVBQUUsa0JBQWtCO1lBQ2xDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtTQUNwQjtRQUNELFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSTtRQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQy9CLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUTtLQUN4QixDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNwRCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFOUMsSUFBSSxJQUFJLENBQUM7SUFFVCxJQUFJO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzlCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxNQUFNLEtBQUssQ0FBQztLQUNiO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFqQ1csUUFBQSxZQUFZLGdCQWlDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnQGF3cy1jcnlwdG8vc2hhMjU2LWpzJztcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSc7XG5pbXBvcnQgeyBTaWduYXR1cmVWNCB9IGZyb20gJ0Bhd3Mtc2RrL3NpZ25hdHVyZS12NCc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhd3Mtc2RrL3Byb3RvY29sLWh0dHAnO1xuXG5jb25zdCB7IFNoYTI1NiB9ID0gY3J5cHRvO1xuY29uc3QgR1JBUEhRTF9FTkRQT0lOVCA9IHByb2Nlc3MuZW52LkFQSV9FTkRQT0lOVDtcbmNvbnN0IEFXU19SRUdJT04gPSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICdldS13ZXN0LTEnO1xuXG5jb25zdCBlbmRwb2ludCA9IG5ldyBVUkwoR1JBUEhRTF9FTkRQT0lOVCA/PyBcIlwiKTtcblxuZXhwb3J0IGNvbnN0IGdyYXBoUWxRdWVyeSA9IGFzeW5jIChxdWVyeTogc3RyaW5nKSA9PiB7XG4gIFxuICBjb25zdCBzaWduZXIgPSBuZXcgU2lnbmF0dXJlVjQoe1xuICAgIGNyZWRlbnRpYWxzOiBkZWZhdWx0UHJvdmlkZXIoKSxcbiAgICByZWdpb246IEFXU19SRUdJT04sXG4gICAgc2VydmljZTogJ2FwcHN5bmMnLFxuICAgIHNoYTI1NjogU2hhMjU2XG4gIH0pO1xuXG4gIFxuICBjb25zdCByZXF1ZXN0VG9CZVNpZ25lZCA9IG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIGhvc3Q6IGVuZHBvaW50Lmhvc3RcbiAgICB9LFxuICAgIGhvc3RuYW1lOiBlbmRwb2ludC5ob3N0LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcXVlcnkgfSksXG4gICAgcGF0aDogZW5kcG9pbnQucGF0aG5hbWVcbiAgfSk7XG5cbiAgY29uc3Qgc2lnbmVkID0gYXdhaXQgc2lnbmVyLnNpZ24ocmVxdWVzdFRvQmVTaWduZWQpO1xuICBjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoZW5kcG9pbnQsIHNpZ25lZCk7XG5cbiAgbGV0IGJvZHk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuICAgIGJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgcmV0dXJuIGJvZHk7XG59OyJdfQ==